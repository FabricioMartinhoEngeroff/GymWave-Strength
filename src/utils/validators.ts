
// üîÅ Mensagens de erro reutiliz√°veis
const validationErrors = {
  required: "Este campo √© obrigat√≥rio",
  invalidEmail: "Formato de e-mail inv√°lido",
  invalidCPF: "CPF inv√°lido. Deve conter 11 d√≠gitos num√©ricos",
  invalidPhone: "N√∫mero de telefone inv√°lido. Deve conter 10 ou 11 d√≠gitos",
  passwordTooShort: "A senha deve ter no m√≠nimo 8 caracteres",
  invalidPassword: "A senha deve conter letra, n√∫mero e caractere especial",
};

// üß™ Express√µes regulares para valida√ß√£o
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const cpfRegex = /^\d{11}$/;
const phoneRegex = /^\d{10,11}$/;
const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@#$%^&+=!]).{8,}$/;

/**
 * ‚úÖ Valida um e-mail no formato padr√£o.
 * @param email string
 * @returns mensagem de erro ou null se v√°lido
 */
export function validateEmail(email: string): string | null {
  if (!email) return validationErrors.required;
  if (!emailRegex.test(email)) return validationErrors.invalidEmail;
  return null;
}

/**
 * ‚úÖ Valida um CPF (somente n√∫meros, sem m√°scara).
 * @param cpf string
 * @returns mensagem de erro ou null se v√°lido
 */
export function validateCPF(cpf: string): string | null {
  if (!cpf) return validationErrors.required;
  const numbers = cpf.replace(/\D/g, ""); // Remove pontos e tra√ßos
  if (!cpfRegex.test(numbers)) return validationErrors.invalidCPF;
  return null;
}

/**
 * ‚úÖ Valida um n√∫mero de telefone fixo ou celular (com ou sem m√°scara).
 * @param phone string
 * @returns mensagem de erro ou null se v√°lido
 */
export function validatePhone(phone: string): string | null {
  if (!phone) return validationErrors.required;
  const numbers = phone.replace(/\D/g, ""); // Remove par√™nteses, espa√ßos, tra√ßos etc.
  if (!phoneRegex.test(numbers)) return validationErrors.invalidPhone;
  return null;
}

/**
 * ‚úÖ Valida uma senha com crit√©rios m√≠nimos de seguran√ßa:
 * - Pelo menos 8 caracteres
 * - Pelo menos uma letra mai√∫scula, uma min√∫scula, um n√∫mero e um caractere especial
 * @param password string
 * @returns mensagem de erro ou null se v√°lido
 */
export function validatePassword(password: string): string | null {
  if (!password) return validationErrors.required;
  if (password.length < 8) return validationErrors.passwordTooShort;
  if (!passwordRegex.test(password)) return validationErrors.invalidPassword;
  return null;
}

/**
 * ‚úÖ Valida se h√° campos vazios (inclusive objetos aninhados).
 * - Retorna a chave completa do primeiro campo vazio encontrado
 * - Ex: endereco.cidade - Este campo √© obrigat√≥rio
 * @param fields qualquer objeto
 * @param parentKey usado internamente para montar caminho (n√£o precisa passar)
 */
export function validateEmptyFields(fields: unknown, parentKey = ""): string | null {
  if (typeof fields !== "object" || fields === null) return null;

  for (const [key, value] of Object.entries(fields as Record<string, unknown>)) {
    const fullKey = parentKey ? `${parentKey}.${key}` : key;

    if (typeof value === "object" && value !== null) {
      const nestedError = validateEmptyFields(value, fullKey);
      if (nestedError) return nestedError;
    } else if (
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "")
    ) {
      return `${fullKey} - ${validationErrors.required}`;
    }
  }

  return null; // Nenhum campo vazio encontrado
}

/**
 * ‚úÖ Valida apenas os campos obrigat√≥rios para login (email e senha).
 * - Ignora campos como nome, CPF, telefone etc.
 * @param fields objeto contendo email e senha
 */
export function validateLoginFields(fields: Record<string, unknown>): string | null {
  if (!fields || typeof fields !== "object") return null;

  const requiredFields = ["email", "password"];

  for (const field of requiredFields) {
    const value = fields[field];
    if (
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "")
    ) {
      return `${field} - ${validationErrors.required}`;
    }
  }

  return null;
}
